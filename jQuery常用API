1. 通过操作CSS修改样式
	1.1 参数只写属性名：返回属性值
		例子：
		$(this).css('color');
	1.2 参数是属性名,属性值：逗号分隔，设置一种样式，属性必须加引号，值如果是数字可以不用跟单位和引号
		例子：
		$(this).css('color','red')；
	1.3 参数是对象形式：设置多组样式，
	属性名和属性值用冒号隔开
	属性名可以不加引号
	如果属性名是符合属性，则必须用驼峰命名法而不是-
	如果值不是数字，则需要加引号
	例子：
	$('div').css({
		width:400,
		height:200,
		backgroundColor: 'red' // 如果是CSS中则是background-color: red
	})

2. 通过操作类进行修改样式
	2.1 基本操作
		添加类：.addClass('类名')
		移除类：.removeClass('类名')
		切换类：.toggleClass('类名')
	2.2 类操作与className的区别
		原生JS中className会覆盖元素原先的类名
		jQuery类操作不会覆盖，相当于追加一个新的

3. jQuery效果
	3.1 显示与隐藏
		显示：.show([speed],[easing],[fn])
		隐藏：.hide([speed],[easing],[fn])
		切换：.toggle([speed],[easing],[fn])
		实际开发中，由于动画效果不佳，因此参数都不写
	3.2 滑动
		向下滑动：.slideDown([speed],[easing],[fn])
		向上滑动：.slideUp([speed],[easing],[fn])
		切换滑动：.slideToggle([speed],[easing],[fn])
	3.3 事件切换
		3.3.1 语法
			hover([over,]out)
			1.over：鼠标移动元素上会触发的函数
			2.out：鼠标移除元素会触发的函数
		3.3.2 事件切换如果只写一个函数，那么鼠标经过和离开都会触发这个函数
			例子：
			$('nav>li').hover(function() {
				$(this).children('ul').slideToggle();
			})
			可实现鼠标经过时下拉，离开时上拉
	3.4 动画队列及其停止派对方法
		3.4.1 动画或效果队列
			动画或效果一旦多次触发，就会造成多个动画或效果同时显示
			因此只要用到动画函数，都要加stop()
		3.4.2 停止排队
			.stop().动画函数()
			注意，stop()必须写到动画或者效果的前面，相当于停止结束上一次的动画
	3.5 淡入淡出
		淡入：fadeIn([speed],[easing],[fn])
		淡出：fadeOut([speed],[easing],[fn])
		切换：fadeToggle([speed],[easing],[fn])
		变换透明度：fadeTo(speed,opacity,[easing],[fn]) speed和opacity（0~1）必须写
	3.6 自定义动画animate
		3.6.1 语法
			animate(params,[speed],[easing],[fn])
			params是想要更改的样式属性，以对象形式传递，属性名可以不带引号，如果是符合属性则需要采用驼峰命名法
			例子：
			$("button").click(function() {
				$("div").animate({
					left:500,
					top:200,
					opacity:.4
				},500)
			})

4. 属性操作
	4.1 设置或获取元素固有属性
		获取：元素.prop("属性")
		设置：元素.prop("属性","属性值")
	4.2 设置或获取元素自定义属性
		获取：元素.attr("属性")
		设置：元素.("属性","属性值")
	4.3 数据缓存
		date()方法可以在指定的元素上存取数据而不修改DOM元素结构，一旦页面刷新数据就会删除
		获取数据：元素.date("name")
		附加数据：元素.date("name","value")

5. 内容文本值
	5.1 普通元素内容
		获取到的包含标签和文本
		获取：.html()
		设置：.html("要改成的内容")
	5.2 普通元素文本内容
		获取到的只有文本，没有标签
		获取：.text()
		设置：.text("要改成的内容")
	5.3 表单的内容
		获取：.val()
		设置：.val("要改成的内容")

6. 元素操作
	6.1 遍历元素
		6.1.1 $("选择器").each()方法
			6.1.1.1 语法：
				$("div").each(function(index, domElm) {
					回调函数;
				})
			6.1.1.2 特点
				1. 主要用于获取DOM元素
				2. index是数组的索引号或对象的属性名，domEle是每个DOM元素对象，不是jQuery对象
				3. 所以想使用jQuery方法，需要给这个DOM元素转换为jQuery对象$(domElm)
		6.1.2 $.each()方法
			6.1.2.1 语法
				$.each(boject, function(index, element) {xxx;})
			6.1.2.2 特点
				1. 主要用于获取数据
				2. index是数组的索引号或对象的属性名，element是内容或对象的属性值
	6.2 创建元素
		语法
		$("<li></li>");
	6.3 添加元素
		6.3.1 内部添加
			element.append("内容"/标签)
			把内容放入匹配元素内部最后面
			element.prepend("内容"/标签)
			把内容放入匹配元素内部最前面
			注意，element和内部添加生成的新元素，它们是父子关系
		6.3.2 外部添加
			element.after("内容"/标签)
			把内容放入匹配元素内部最后面
			element.before("内容"/标签)
			把内容放入匹配元素内部最前面
			注意，element和外部添加生成的新元素，它们是兄弟关系
	6.4 删除元素
		删除元素本身：要删除的元素.remove()
		删除元素集合中所有的子节点：element.empty()或element.html("")

7. 尺寸、位置操作
	7.1 尺寸
		7.1.1 语法
			width()/height() 只算宽/高
			innerWidth()/innerHeight() 包含padding
			outerWidth()/outerHeight() 包含padding、border
			outerWidth()/outerHeight() 包含padding、border、margin
		7.1.2 特点
			参数为空，则获取数值，返回的是数字型
			参数为数字，则是修改成括号里的值
			参数可以不写单位
	7.2 位置
		7.2.1 offset()
			1. 设置或返回相对于文档的偏移坐标，跟父级没有关系
			2. 该方法有两个属性left、top，即offset().top和offset().left，用于获取
			3. 可以设置元素的偏移，如：
			$(".son").offset({
				top: 100,
				left: 200
			});
		7.2.2 possition()
			1. 获取相对于带有定位的父级的偏移坐标
			2. 如果父级都没有定位，则以文档为准
			3. 这个方法只能获取不能设置
		7.2.3 scrollTop()/scrollLeft()
			1. 设置或返回被选元素被卷去的头部
		7.2.4 带有动画效果的返回顶部
			animate函数里面有个scrollTop属性可设置跳转的位置，但是只能对元素进行操作
			$("body, html").stop().animate({
				scrollTop: 0
			});

8. jQuery选择器
	8.1 基础选择器和层级选择器
		8.1.1 基础选择器
	 	    $("选择器")
		    ID选择器：$("#ID")
		    全选选择器：$("*")
		    类选择器：$(".class")
		    标签选择器：$("div")
		    并集选择器：$("div, p, li")
		    交集选择器：$("li.current")
	        8.1.2 层级选择器
		    自带选择器：$("ul>li")
		    后代选择器：$("ul li")
	8.2 隐式迭代
		会自动把匹配的所有元素内部进行遍历循环并给每一个元素都执行相同的方法，即不需要再写for循环
	8.3 筛选选择器
		获取第一个元素：$('标签:first')
		获取最后一个元素：$('标签:last')
		获取第i个元素：$('标签:eq(i)')
		获取索引号为奇数的元素：$('标签:odd')
		获取索引号为偶数的元素：$('标签:even')
		查找被选中的（打钩的）表单元素：:checked
	8.4 筛选方法
		查找父级：.parent()
		查找某个或某些祖先：.parents("选择器")
		最近一级的亲儿子们：.children('标签名')
		所有的后代：.find('标签名')
		不包括自身的其他所有兄弟节点：.siblings('标签名')
		第i个元素：.eq(i)
	8.5 jQuery排他思想
		$('button').click(function() {
			// 当前的元素变化背景颜色
			$(this).css('background', 'pink');
			// 其余的兄弟去掉背景颜色
			$(this).siblings('button').css('background', '');
		})
	8.6 得到当前元素索引号
		$(this).index()
	8.7 链式编程
			$(this).css('background', 'pink');
			$(this).siblings('button').css('background', '');
			这两句可以合并成：
			$(this).css('color','red').siblings().css('color','');
